;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; LISP Evaluator
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
{def index
  {lambda [e items i]
    {cond
      [{not .items} ()]
      [{eq .e {car .items}} .i]
      [else  {index .e {cdr .items} {sum$int 1 .i}}]}}}

{def memb
  {lambda [e items]
    {index .e .items 0}}}

{def atom?
  {lambda [e]
    {memb {type .e} (Id Num)}}}

{def comp-lisp
  {lambda [l]
    {print (comp-lisp .l)}
    {cond
      [{atom? .l} {comp-atom .l}]
      [.l {comp-list .l}]
      [else .l]}}}

{def comp-atom
  {lambda [a]
    {print (comp-atom .a)}
    {cond
      [{eq Num {type .a}} .a]
      [{eq T .a} T]
      [{eq nil .a} ()]
      [else {ete .a {quote .x}}]}}}

{def comp-list
  {lambda [l]
    {let [[h {car .l}] [t {cdr .l}]]
      {print (comp-list .h .t)}
      {cond
        [{eq .h quote} {car .t}]
        [else
          {ete
            {cond
              [{atom? .t} {comp-atom .t}]
              [else {cons .h {comp-list {car .t}}}]}
            {quote {x}}}]}}}}

;{print {eval {comp-lisp 1}}}
;{print {eval {comp-lisp (cons 1 ())}}}
;{print {eval {comp-lisp (quote a)}}}
{print {print {comp-lisp (car (quote (1 2 3)))}}}
